Divide the Books:
    - First, divide the entire collection of books into two equal halves. If you have an odd number of books, one half will have one more book than the other.
    - Keep dividing each half into smaller halves until each group has only one book. Now, each book is considered "sorted" because a single book doesn't need sorting.

Merge the Books:
    - Start merging the small groups back together in the correct order.
    - Compare the books from the two groups and arrange them in sorted order in a new group.
    - For example, if you have two groups, one with a book of height 3 and another with a book of height 5, you merge them into a single group: [3, 5].

Continue Merging:
    - Keep merging the groups back together in sorted order.
    - Each time you merge, the groups get larger and remain sorted.

Final Merge:
    - Finally, after all the groups have been merged back together, you will have one large, fully sorted group of books.

-------------------------------------------------------------------------------------------------------------------------------------------------------------

Let's sort the list [38, 27, 43, 3, 9, 82, 10] using merge sort.

Divide:
    - Split into two halves: [38, 27, 43, 3] and [9, 82, 10]
    - Split these halves again: [38, 27] and [43, 3], [9] and [82, 10]
    - Continue splitting until each group has one book: [38], [27], [43], [3], [9], [82], [10]

Merge:
    - Merge [38] and [27] into [27, 38]
    - Merge [43] and [3] into [3, 43]
    - Now, merge [27, 38] and [3, 43] into [3, 27, 38, 43]
    - Similarly, merge [9] and [82, 10]:
        - First, merge [82] and [10] into [10, 82]
        - Then, merge [9] and [10, 82] into [9, 10, 82]

Final Merge:

    - Merge the two larger sorted groups: [3, 27, 38, 43] and [9, 10, 82]
    - Compare and merge them into the final sorted list: [3, 9, 10, 27, 38, 43, 82]

Now the list is fully sorted.

Key Points:
    - Divide and Conquer: Merge sort works by repeatedly splitting the list in half until each part is small enough (a single element).
    - Merging: It then merges the parts back together in sorted order.
    - Efficiency: Merge sort is very efficient, especially for large lists. It has a consistent time complexity of O(n log n).
    - Stable: Merge sort is stable, meaning it preserves the relative order of equal elements.